name: "ZAP docker CI workflow"


on:
  push:
    branches: [ test ]
  schedule:
      - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month 


jobs:

# https://www.zaproxy.org/docs/docker/about/
 ubuntu-latest-zap-full-basic-job:
    name: "ZAP docker"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status  
    - name: "ZAP GUI in a Browser"
      run: | 
          # run the ZAP Desktop UI in your browser without having to install Java
          # https://www.zaproxy.org/docs/docker/webswing/
          # http://localhost:8080/zap
          docker run -u zap -p 8080:8080 -p 8090:8090 -i owasp/zap2docker-stable zap-webswing.sh
    # - name: "ZAP Headless"
    #   run: | 
    #       # -config api.addrs.addr.name=.* opens the API up for connections from 
    #       # any other host, it is prudent to configure this more specifically for
    #       #  your network/setup
    #       docker run -u zap -p 8080:8080 -i owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.key=<api-key>     
    # - name: "ZAP Headless with xvfb"
    #   run: | 
    #       # -config api.addrs.addr.name=.* opens the API up for connections from 
    #       # any other host, it is prudent to configure this more specifically for
    #       #  your network/setup
    #       # This first starts xvfb (X virtual frame buffer) which allows add-ons 
    #       # that use Selenium (like the Ajax Spider and DOM XSS scanner) to run in a headless environment
    #       # Firefox is also installed so can be used with these add-ons
    #       # docker run -u zap -p 8080:8080 -i owasp/zap2docker-stable zap-x.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
    - name: "ZAP CLI"
      run: | 
          docker run -i owasp/zap2docker-stable zap-cli quick-scan --self-contained \
            --start-options '-config api.disablekey=true' http://testphp.vulnweb.com  
    - name: "Scanning an app running on the host OS"
      run: |
          # https://hub.docker.com/r/vulnerables/web-dvwa
          docker run --rm -it -p 80:80 vulnerables/web-dvwa
          # IP addresses like localhost and 127.0.0.1 cannot be used to access an app 
          # running on the host OS from within a docker container
          echo  $(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1)
          docker run -t owasp/zap2docker-weekly zap-baseline.py \
          -t http://$(ip -f inet -o addr show docker0 | \
          awk '{print $4}' | cut -d '/' -f 1):10080 
    - name: "Scanning an app running in another Docker container"
      run: |
          # By default Docker does not allow apps running in one container to 
          # access an app running in another container
          # To get around this restriction create a Docker network
          docker network create zapnet
          # https://hub.docker.com/r/vulnerables/web-dvwa
          docker run --rm -it -p 80:80 --net zapnet vulnerables/web-dvwa
          # IP addresses like localhost and 127.0.0.1 cannot be used to access an app 
          # running on the host OS from within a docker container
          echo  $(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1)
          docker run -t --net zapnet owasp/zap2docker-weekly zap-baseline.py \
          -t http://$(ip -f inet -o addr show docker0 | \
          awk '{print $4}' | cut -d '/' -f 1):10080           






